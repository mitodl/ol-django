[project]
name = "ol-django"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "MIT Open Learning Engineering", email = "odl-devops@mit.edu" }
]
dependencies = [
  "mitol-django-common[celery]",
  "mitol-django-mail",
  'mitol-django-authentication[touchstone]; python_version < "3.13"',
  'mitol-django-authentication; python_version >= "3.13"',
  "mitol-django-digitalcredentials",
  "mitol-django-geoip",
  "mitol-django-google_sheets",
  "mitol-django-google_sheets_deferrals",
  "mitol-django-google_sheets_refunds",
  "mitol-django-hubspot_api",
  "mitol-django-oauth_toolkit_extensions",
  "mitol-django-olposthog",
  "mitol-django-openedx",
  "mitol-django-payment_gateway",
  "mitol-django-uvtestapp",
  "mitol-django-transcoding",
  "mitol-django-scim[celery]",
  "mitol-django-apigateway",
]
readme = "README.md"
requires-python = ">= 3.10"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
managed = true
dev-dependencies = [
    "GitPython",
    "anys>=0.3.1",
    "bumpver",
    "click",
    "click-log",
    "cloup",
    "coverage<=7.10.2",
    "deepmerge>=2.0",
    "dj-database-url",
    "django-stubs[compatible-mypy]",
    "factory-boy~=3.2",
    "faker>=4.17.1",
    "freezegun>=1.5.1",
    "ipdb",
    "mypy",
    "mypy-extensions",
    "psycopg2-binary",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.25.3",
    "pytest-cov>=4.0.0",
    "pytest-django==4.11.1",
    "pytest-lazy-fixtures>=1",
    "pytest-mock==3.14.1",
    "responses==0.25.8",
    "ruff",
    "scriv[toml]",
    "semver",
    "toml",
    "typing-extensions",
    "pytest-responses>=0.5.1",
    "more-itertools>=10.6.0",
    "deepdiff>=8.5.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.uv.workspace]
members = ["src/*", "testapp"]

[tool.uv.pip]
no-binary = ["lxml", "xmlsec"]

[tool.uv.sources]
mitol-django-common = { workspace = true }
mitol-django-mail = { workspace = true }
mitol-django-authentication = { workspace = true }
mitol-django-digitalcredentials = { workspace = true }
mitol-django-geoip = { workspace = true }
mitol-django-google_sheets = { workspace = true }
mitol-django-google_sheets_deferrals = { workspace = true }
mitol-django-google_sheets_refunds = { workspace = true }
mitol-django-hubspot_api = { workspace = true }
mitol-django-oauth_toolkit_extensions = { workspace = true }
mitol-django-olposthog = { workspace = true }
mitol-django-openedx = { workspace = true }
mitol-django-payment_gateway = { workspace = true }
mitol-django-uvtestapp = { workspace = true }
mitol-django-transcoding = { workspace = true }
mitol-django-scim = { workspace = true }
mitol-django-apigateway = { workspace = true }

[tool.hatch.build.targets.sdist]
include = ["CHANGELOG.md", "README.md", "py.typed", "**/*.py"]
exclude = ["BUILD", "pyproject.toml"]

[tool.hatch.build.targets.wheel]
include = ["CHANGELOG.md", "README.md", "py.typed", "**/*.py"]
exclude = ["BUILD", "pyproject.toml"]

[tool.pytest.ini_options]
addopts = "--cov . --cov-report term --cov-report html --cov-report xml --reuse-db"
norecursedirs = ".git .tox .* CVS _darcs {arch} *.egg dist"
DJANGO_SETTINGS_MODULE = "main.settings.test"
# -- recommended but optional:
python_files = ["tests/**/test_*.py"]
pythonpath = ["testapp", "src", "tests"]

[tool.django-stubs]
django_settings_module = "main.settings.test"

[tool.mypy]
namespace_packages = true
plugins = [
  "mypy_django_plugin.main",
  "mypy_drf_plugin.main"
]

[[tool.mypy.overrides]]
module = [
  "mypy-factory.*",
  "mypy-freezegun.*",
  "mypy-pytest.*",
  "mypy-oauth2_provider.*",
  "mypy-responses.*",
  "mypy-anymail.*",
  "mypy-bs4.*",
  "mypy-premailer.*",
  "mypy-toolz.*",
  "mypy-dj_database_url.*",
]


[tool.ruff]
target-version = "py310"
line-length = 88
lint.select = [
    "A",  # flake8-builtins
    # "AIR",  # Airflow
    # "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    # "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    # "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",  # pydocstyle
    # "DJ",  # flake8-django
    "DTZ",  # flake8-datetimez
    "E",  # Pycodestyle Error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    # "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "N",  # pep8-naming
    # "NPY",  # NumPy-specific rules
    # "PD",  # pandas-vet
    "PERF",  # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    # "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Pycodestyle Warning
    "YTT",  # flake8-2020
]
lint.ignore = [
    "B008",
    "B905",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "N803",
    "N806",
    "N999",
    "PIE804",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF012",
    "UP007",
]
lint.typing-modules = ["colour.hints"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"


[tool.ruff.lint.flake8-tidy-imports.banned-api]
"django.contrib.auth.models.User".msg = "use get_user_model() or settings.AUTH_USER_MODEL"


[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101"]
"test_*.py" = ["S101"]
"**/migrations/**" = ["ARG001", "D100", "D101", "E501"]
